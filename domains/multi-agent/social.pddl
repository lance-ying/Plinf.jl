(define (problem doors-keys-gems-problem)
  (:domain doors-keys-gems)
  (:objects door1 door2 - door
            key1 key2 - key
            gem1 gem2 gem3 gem4 gem5 - gem
            yellow red - color
            robot - robot
            human - human)
  (:init (= (walls) (new-bit-matrix false 10 7))
         (= (agentcode human) 0)
         (= (agentcode robot) 1)
         (= (turn) 0)
         (= (walls) (set-index walls true 1 1))
         (= (xloc gem1) 2)
         (= (yloc gem1) 1)
         (= (walls) (set-index walls true 1 3))
         (= (xloc gem2) 4)
         (= (yloc gem2) 1)
         (= (walls) (set-index walls true 1 5))
         (= (xloc gem3) 6)
         (= (yloc gem3) 1)
         (= (walls) (set-index walls true 1 7))
         (= (walls) (set-index walls true 2 1))
         (= (xloc door1) 2)
         (= (yloc door1) 2)
         (iscolor door1 yellow)
         (locked door1)
         (= (walls) (set-index walls true 2 3))
         (= (xloc gem4) 4)
         (= (yloc gem4) 2)
         (= (walls) (set-index walls true 2 5))
         (= (xloc door2) 6)
         (= (yloc door2) 2)
         (iscolor door2 red)
         (locked door2)
         (= (walls) (set-index walls true 2 7))
         (= (walls) (set-index walls true 3 1))
         (= (walls) (set-index walls true 3 3))
         (= (walls) (set-index walls true 3 5))
         (= (walls) (set-index walls true 3 7))
         (= (walls) (set-index walls true 5 1))
         (= (walls) (set-index walls true 5 2))
         (= (walls) (set-index walls true 5 3))
         (= (walls) (set-index walls true 5 5))
         (= (walls) (set-index walls true 5 6))
         (= (walls) (set-index walls true 5 7))
         (= (xloc gem5) 7)
         (= (yloc gem5) 7)
         (= (xloc key1) 1)
         (= (yloc key1) 10)
         (iscolor key1 yellow)
         (= (xloc key2) 4)
         (= (yloc key2) 10)
         (iscolor key2 red)
         (= (xloc human) 4)
         (= (yloc human) 7))
  (:goal (has human gem4))
)